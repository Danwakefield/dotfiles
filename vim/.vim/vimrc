" :vim fdm=marker:
scriptencoding utf-8
set encoding=utf-8

if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall
endif

if empty(glob('~/.vim/bundle/'))
    autocmd VimEnter * PlugInstall
endif

call plug#begin('~/.vim/bundle')

" Plug 'ScrollColors'
Plug 'https://github.com/chriskempson/base16-vim'
" Plug 'https://github.com/daylerees/colour-schemes', {'rtp': 'vim'}

"Autocomplete
if has("python")
    Plug 'Valloric/YouCompleteMe', {'do': './install.sh --clang-completer'}
        let g:ycm_min_num_of_chars_for_completion = 2
        let g:ycm_min_num_identifier_candidate_chars = 2
        let g:ycm_collect_identifiers_from_tags_files = 1
        let g:ycm_goto_buffer_command = 'new-tab'
        let g:ycm_autoclose_preview_window_after_completion = 1
        let g:ycm_autoclose_preview_window_after_insertion = 1
        nnoremap <leader>wg :YcmCompleter GoTo<CR>
        nnoremap <leader>wd :YcmCompleter GoToDefinition<CR>
        nnoremap <leader>wc :YcmCompleter GoToDeclaration<CR>
    Plug 'https://github.com/rdnetto/YCM-Generator', {'tag': 'stable'}

    Plug 'honza/vim-snippets'
    Plug 'SirVer/ultisnips'
        let g:UltiSnipsExpandTrigger="<c-j>"
        let g:UltiSnipsJumpForwardTrigger="<c-j>"
        let g:UltiSnipsJumpBackwardTrigger="<c-k>"

endif
Plug 'https://github.com/AndrewRadev/inline_edit.vim'
Plug 'https://github.com/muziqiushan/vim-bufonly'

" Language specific
Plug 'https://github.com/hdima/python-syntax', {'for': 'python'}
    let python_highlight_all = 1
    let python_highlight_space_errors = 0
Plug 'https://github.com/hynek/vim-python-pep8-indent', {'for': 'python'}
Plug 'https://github.com/jmcantrell/vim-virtualenv', {'for': 'python'}
Plug 'https://github.com/helino/vim-nasm', {'for': 'nasm'}

Plug 'https://github.com/fatih/vim-go', {'for': 'go'}
    let g:go_bin_path = expand("~/code/go/bin")
    let g:go_fmt_fail_silently = 1
    let g:go_fmt_command = 'goimports'
    let g:go_highlight_structs = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_textobj_enabled = 0
    augroup vim_go
        autocmd!
        autocmd FileType go nmap <leader>gR <Plug>(go-run)
        autocmd FileType go nmap <leader>gb <Plug>(go-build)
        autocmd FileType go nmap <leader>gt <Plug>(go-test)
        autocmd FileType go nmap <leader>gc <Plug>(go-coverage)
        autocmd FileType go nmap <Leader>gds <Plug>(go-def-split)
        autocmd FileType go nmap <Leader>gdv <Plug>(go-def-vertical)
        autocmd FileType go nmap <Leader>gdt <Plug>(go-def-tab)
        autocmd FileType go nmap <Leader>gdb <Plug>(go-doc-browser)
        autocmd FileType go nmap <Leader>gdd <Plug>(go-doc-vertical)
        autocmd FileType go nmap <Leader>gi <Plug>(go-implements)
        autocmd FileType go nmap <Leader>gr <Plug>(go-rename)
        autocmd BufEnter *.go setlocal fdm=indent
    augroup END

Plug 'https://github.com/chase/vim-ansible-yaml'
    let g:ansible_options = {'ignore_blank_lines': 1}

Plug 'https://github.com/othree/html5.vim'
Plug 'https://github.com/suan/vim-instant-markdown'
	let g:instant_markdown_autostart = 0
	" use :InstantMarkdownPreview

" Git integration
Plug 'git.zip'
Plug 'fugitive.vim'

" Utility
Plug 'repeat.vim'
Plug 'surround.vim'
Plug 'Tabmerge'
Plug 'https://github.com/bling/vim-airline'
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#left_sep = ' '
    let g:airline#extensions#tabline#left_alt_sep = '|'
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    set laststatus=2
    nmap <leader>1 <Plug>AirlineSelectTab1
    nmap <leader>2 <Plug>AirlineSelectTab2
    nmap <leader>3 <Plug>AirlineSelectTab3
    nmap <leader>4 <Plug>AirlineSelectTab4
    nmap <leader>5 <Plug>AirlineSelectTab5
    nmap <leader>6 <Plug>AirlineSelectTab6
    nmap <leader>7 <Plug>AirlineSelectTab7
    nmap <leader>8 <Plug>AirlineSelectTab8
    nmap <leader>9 <Plug>AirlineSelectTab9

Plug 'https://github.com/danro/rename.vim'
Plug 'https://github.com/godlygeek/tabular'
    nmap <Leader>a& :Tabularize /&<CR>
    vmap <Leader>a& :Tabularize /&<CR>
    nmap <Leader>a= :Tabularize /=<CR>
    vmap <Leader>a= :Tabularize /=<CR>
    nmap <Leader>a=> :Tabularize /=><CR>
    vmap <Leader>a=> :Tabularize /=><CR>
    nmap <Leader>a: :Tabularize /:<CR>
    vmap <Leader>a: :Tabularize /:<CR>
    nmap <Leader>a:: :Tabularize /:\zs<CR>
    vmap <Leader>a:: :Tabularize /:\zs<CR>
    nmap <Leader>a, :Tabularize /,<CR>
    vmap <Leader>a, :Tabularize /,<CR>
    nmap <Leader>a,, :Tabularize /,\zs<CR>
    vmap <Leader>a,, :Tabularize /,\zs<CR>
    nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
    vmap <Leader>a<Bar> :Tabularize /<Bar><CR>

Plug 'https://github.com/kien/ctrlp.vim'
    let g:ctrlp_cmd = 'CtrlPMRU'
    let g:ctrlp_working_path_mode = 'ra'
    let g:ctrlp_switch_buffer = '0'

Plug 'https://github.com/luochen1990/rainbow'
    let g:rainbow_active = 1
    let g:rainbow_conf = {
        \   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
        \   'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
        \   'operators': '_,_',
        \   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
        \   'separately': {
        \       '*': {},
        \       'vim': {
        \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
        \       },
        \       'css': 0,
        \   }
        \}

Plug 'https://github.com/junegunn/vim-peekaboo'
Plug 'https://github.com/milkypostman/vim-togglelist'
Plug 'https://github.com/jlanzarotta/bufexplorer'
Plug 'https://github.com/nathanaelkane/vim-indent-guides.git'
Plug 'https://github.com/tpope/vim-commentary'

Plug 'https://github.com/scrooloose/nerdtree'
    map <F2> :NERDTreeToggle<CR>
    let g:NERDTreeIgnore = ['\.pyc$']
    let g:NERDTreeBookmarksFile = "$HOME/.vim/nerdtreebookmarks"

Plug 'https://github.com/scrooloose/syntastic'
    map <F5> :SyntasticCheck<CR>
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_aggregate_errors = 1
    let g:syntastic_sort_aggregated_errors = 0

    let g:syntastic_python_checkers = ['pylint', 'pep8']
    let g:syntastic_python_pylint_args = '--rcfile=~/.pylintrc'

    let g:syntastic_sh_checkers = ['shellcheck']
    let g:syntastic_sh_shellcheck_args = '--shell=bash'

    let g:syntastic_go_checkers = ['golint', 'go vet']

    let g:syntastic_asm_checkers = ['nasm']

    let g:syntastic_javascript_checkers = ['eslint']
    let g:syntastic_javascript_eslint_exec = 'eslint_d'

Plug 'https://github.com/sjl/gundo.vim.git', {'on': 'GundoToggle'}
    map <F3> :GundoToggle<CR>

Plug 'https://github.com/terryma/vim-expand-region'
Plug 'https://github.com/AndrewRadev/inline_edit.vim', {'on': 'InlineEdit'}
Plug 'https://github.com/tpope/vim-markdown'
Plug 'https://github.com/jez/vim-superman'
Plug 'https://github.com/tpope/vim-unimpaired.git'
if has("python")
    Plug 'https://github.com/majutsushi/tagbar'
        map <F8> :TagbarToggle<CR>
    Plug 'https://github.com/xolox/vim-easytags'
        let g:easytags_async = 1
        let g:easytags_auto_highlight = 0
        let g:easytags_file = "~/.vim/tags/tags"
        let g:easytags_by_filetype = "~/.vim/tags"
        let g:tagbar_type_go = {
                    \ 'ctagstype' : 'go',
                    \ 'kinds' : [ 'p:package', 'i:imports:1', 'c:constants', 'v:variables',
                    \ 't:types', 'n:interfaces', 'w:fields', 'e:embedded', 'm:methods',
                    \ 'r:constructor', 'f:functions' ],
                    \ 'sro' : '.',
                    \ 'kind2scope' : { 't' : 'ctype', 'n' : 'ntype' },
                    \ 'scope2kind' : { 'ctype' : 't', 'ntype' : 'n' },
                    \ 'ctagsbin' : 'gotags',
                    \ 'ctagsargs' : '-sort -silent'
                    \ }
endif

Plug 'KabbAmine/zeavim.vim'
Plug 'https://github.com/xolox/vim-misc'
Plug 'https://github.com/xolox/vim-session'
    map <F1> :SaveSession
    let g:session_autoload = 'no'
    let g:session_autosave = 'yes'
    let g:session_default_to_last = 'no'
    let g:session_directory = '~/.vim/sessions'
    let g:session_autosave_periodic = 5
    let g:session_restart_environment = ['GOPATH', 'GOROOT']
    let g:session_lock_enabled = 0
    let g:session_persist_colors = 0
    set sessionoptions-=options

" Colors
Plug 'https://github.com/chriskempson/base16-vim'

call plug#end()


set number
set relativenumber
set title
set wildmenu
set wildmode=longest:full,full
set wildignore+=*.o,*.obj,.git,*.pyc,*.swp,*.bak,*~
set wildignore+=eggs/**
set wildignore+=*.egg-info/**
set noerrorbells
set novisualbell t_vb=              "No Beeping / flashing
set gdefault                        " Default to replacing all occurances use of /g reverses
set mouse=a
set mousehide
set cursorline
set ruler                           "Always show cursor
set virtualedit=all                 "Fix to visual mode
set scrolloff=3                     "keep cursorline 3 lines from top/bottom
set backspace=indent,eol,start      "backspace over autoindent / EOL
set showmatch                       "Show matching parens
set autoindent
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab               "Use spaces not tabs
set shiftround              "Rounds indent to multiple of shiftwidth
set formatoptions=croql     "Auto format text
set textwidth=78
set magic                   "use more egrep like regex
set ignorecase              "ignore case in search
set smartcase               "Unless search contains uppercase
set lazyredraw              "Dont redraw when running macros
set hlsearch                "Highlight search matches
set incsearch               "Search while composing regex
set nowrap                  "Dont wrap lines
set nobackup                "Dont write junk files
set nowb
set noswapfile
set autowrite
set autowriteall
set autoread
set autochdir               "Change to files dir
set modeline
set modelines=2
set showcmd                 "autocomplete auto commands
set report=0                "commands show changed line count
set laststatus=2            "always show status
set showtabline=2
set foldenable              "Turn on folding
set foldmethod=indent       "But dont autofold on open
set foldlevel=100
set splitright              "Hoz and vert splits appear
set splitbelow              "below and to the right
set shortmess+=filmnrxoOtT  "Abbrev. of messages (avoids 'hit enter')
set viminfo="$HOME/.vim/viminfo"
set list
set listchars=tab:·\ ,trail:˽

if has("gui_running")
    set background=dark
    set guifont=Office\ Code\ Pro\ Medium\ 10
    set guioptions-=T
    set lines=999
    set columns=220
    colorscheme base16-google
else
    set background=dark
    colorscheme delek
endif

let mapleader = '\'
let g:mapleader = '\'
let g:is_bash = 1

" Return to last edit position when opening files
if has("autocmd")
    autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

function WriteCreatingDirs()
    execute ':silent !mkdir -p %:h'
    write
endfunction
command W call WriteCreatingDirs()

if exists("+undofile")
    " undofile - This allows you to use undos after exiting and restarting
    " This, like swap and backups, uses .vim-undo first, then ~/.vim/undo
    " :help undo-persistence
    " This is only present in 7.3+
    if isdirectory($HOME . '/.vim/undo') == 0
        :silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
    endif

    set undodir=./.vim-undo//
    set undodir+=~/.vim/undo//
    set undofile
endif

let g:markdown_fenced_languages = ['asm', 'sh', 'bash=sh', 'c', 'python', 'css', 'erb=eruby', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'sass', 'xml', 'html']
augroup txt_files
    autocmd!
    autocmd FileType text,markdown,gitcommit setl nocindent spell textwidth=0 wrapmargin=0 wrap
    au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])
augroup END

augroup asm
    autocmd!
    autocmd FileType asm setlocal ft=nasm
augroup END

" Force sudo write
cnoremap w!! w !sudo tee % >/dev/null
" Swap the jump to mark operators
" we want to use ' to jump to line+column rather than
" just line as it is closer than `
nnoremap ' `
nnoremap ` '
" make Y work like D - yank to end of line
nmap Y y$
nnoremap ; :
"jj exits insert mode
inoremap jj <ESC>
inoremap jJ <ESC>
inoremap JJ <ESC>
inoremap jk <ESC>:w<CR>
inoremap jK <ESC>:w<CR>
inoremap JK <ESC>:w<CR>
" Allow j and k to work over wrapped lines.
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
"Toggle code fold
nnoremap <space> za
" Change focus to window in direction
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
" Join next line to current
nnoremap J mzJ`z
" Split Lines at cursor
nnoremap S i<cr><esc>^mwgk:silent! s/\v +$//<cr>:noh<cr>`w
" Resize splits
nnoremap <left> <C-w><
nnoremap <right> <C-w>>
nnoremap <down> <C-w>-
nnoremap <up> <C-w>+
nnoremap <F4> :set spell!<CR>
" Unhighlight matches
nnoremap <leader><space> :noh<cr>
" Useful mappings for managing tabs
nnoremap <leader>tn :tabnew<cr>
nnoremap <leader>tc :tabclose<cr>
nnoremap <leader>tm :TabMerge right<CR>
nmap <leader>c :clo<CR>
" paste from system clipboard
nnoremap <leader>p :set paste<CR>"+p<CR>:set nopaste<CR>
" yank to system clipboard
nnoremap <leader>y "+y
vnoremap <leader>y "+y
nnoremap <leader>v :e! $MYVIMRC<CR>
nnoremap <silent> <leader>V :source $MYVIMRC<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
" H and L move right and left through tabs.
nnoremap <S-H> gT
nnoremap <S-L> gt
" Open dir of current file in a file window
" Also %% will expand to current dir on command line.
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
nnoremap <leader>es :sp %%
nnoremap <leader>ev :vsp %%
nnoremap <leader>et :tabe %%
nnoremap <leader>ie :InlineEdit<CR>
