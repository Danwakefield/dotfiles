" :vim fdm=marker:
scriptencoding utf-8
set encoding=utf-8

if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall
endif

if empty(glob('~/.vim/bundle/'))
    autocmd VimEnter * PlugInstall
endif

call plug#begin('~/.vim/bundle')

" Plug 'ScrollColors'
Plug 'https://github.com/chriskempson/base16-vim'
" Plug 'https://github.com/daylerees/colour-schemes', {'rtp': 'vim'}

"Autocomplete
Plug 'Valloric/YouCompleteMe', {'do': './install.py --tern-completer --gocode-completer'}
    let g:ycm_min_num_of_chars_for_completion = 2
    let g:ycm_min_num_identifier_candidate_chars = 2
    let g:ycm_collect_identifiers_from_tags_files = 1
    let g:ycm_goto_buffer_command = 'new-tab'
    let g:ycm_add_preview_to_completeopt = 1
    let g:ycm_autoclose_preview_window_after_completion = 1
    let g:ycm_autoclose_preview_window_after_insertion = 1
    nnoremap <leader>wg :YcmCompleter GoTo<CR>
    nnoremap <leader>wd :YcmCompleter GoToDefinition<CR>
    nnoremap <leader>wc :YcmCompleter GoToDeclaration<CR>
Plug 'https://github.com/rdnetto/YCM-Generator', {'tag': 'stable'}

Plug 'honza/vim-snippets'
Plug 'SirVer/ultisnips'
    let g:UltiSnipsExpandTrigger="<c-j>"
    let g:UltiSnipsJumpForwardTrigger="<c-j>"
    let g:UltiSnipsJumpBackwardTrigger="<c-k>"

Plug 'https://github.com/muziqiushan/vim-bufonly'

" Language specific
Plug 'https://github.com/tpope/vim-endwise'
Plug 'https://github.com/jmcantrell/vim-virtualenv', {'for': 'python'}
Plug 'https://github.com/tmhedberg/SimpylFold'
" Plug 'https://github.com/posva/vim-vue'
" Plug 'https://github.com/wookiehangover/jshint.vim'
Plug 'https://github.com/sheerun/vim-polyglot'
    let g:polyglot_disabled = ['go']
" Plug 'https://github.com/ternjs/tern_for_vim', {'for': 'javascript', 'do': 'npm install'}
Plug 'https://github.com/tpope/vim-rails'
Plug 'https://github.com/christoomey/vim-rfactory'
Plug 'https://github.com/jgdavey/vim-blockle'
Plug 'thoughtbot/vim-rspec'
  map <Leader>tt :call RunCurrentSpecFile()<CR>
  map <Leader>ts :call RunNearestSpec()<CR>
  map <Leader>tl :call RunLastSpec()<CR>
  map <Leader>ta :call RunAllSpecs()<CR>
  if has("mac")
    let g:rspec_runner = "os_x_iterm2"
  endif
  let g:rspec_command = "rspec -fd {spec}"

" GO
Plug 'https://github.com/fatih/vim-go', {'for': 'go'}
    let g:go_bin_path = expand("~/code/go/bin")
    let g:go_fmt_fail_silently = 1
    let g:go_fmt_command = 'goimports'
    let g:go_highlight_structs = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_textobj_enabled = 0
    augroup vim_go
        autocmd!
        autocmd FileType go nmap <Leader>gx <Plug>(go-run)
        autocmd FileType go nmap <Leader>gb <Plug>(go-build)
        autocmd FileType go nmap <Leader>ge <Plug>(go-whicherrs)
        autocmd FileType go nmap <Leader>gt <Plug>(go-test)
        autocmd FileType go nmap <Leader>gc <Plug>(go-coverage)
        autocmd FileType go nmap <Leader>gf <Plug>(go-referrers)
        autocmd FileType go nmap <Leader>gi <Plug>(go-implements)
        autocmd FileType go nmap <Leader>gr <Plug>(go-rename)
        autocmd FileType go nmap <Leader>gdd <Plug>(go-def)
        autocmd FileType go nmap <Leader>gdv <Plug>(go-def-vertical)
        autocmd FileType go nmap <Leader>gdb <Plug>(go-def-tab)
        autocmd BufEnter *.go setlocal fdm=indent
    augroup END

" Git integration
Plug 'git.zip'
Plug 'airblade/vim-gitgutter'
Plug 'https://github.com/neoclide/vim-easygit'
    let g:easygit_enable_command = 1
Plug 'https://github.com/rhysd/committia.vim'

" Utility
Plug 'junegunn/fzf', { 'dir': '~/src/fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
    if has('mac')
        let g:fzf_launcher = $HOME . "/bin/fzf-macvim-iterm-wrapper %s"
    endif
Plug 'https://github.com/airblade/vim-rooter'
    let g:rooter_change_directory_for_non_project_files = 'current'
Plug 'https://github.com/ciaranm/detectindent'
Plug 'https://github.com/tmhedberg/matchit'
Plug 'https://github.com/tpope/vim-eunuch'
Plug 'https://github.com/tpope/vim-abolish'
    " crs = snake_case
    " crm = MixedCase
    " crc = camelCase
    " cru = UPPER_CASE
Plug 'https://github.com/easymotion/vim-easymotion'
    map <Leader>j <Plug>(easymotion-j)
    map <Leader>k <Plug>(easymotion-k)
    map <Leader>w <Plug>(easymotion-w)
    map <Leader>s <Plug>(easymotion-overwin-f2)
    nmap s <Plug>(easymotion-overwin-f)
    let g:EasyMotion_smartcase = 1
Plug 'repeat.vim'
Plug 'surround.vim'
Plug 'Tabmerge'
    nnoremap <leader>tm :Tabmerge right<CR>
Plug 'https://github.com/bling/vim-airline'
    set laststatus=2
    " TODO Customize statusline; dont need a load of junk
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#tab_nr_type = 1
    " Dont show split names when we are in a tab
    let g:airline#extensions#tabline#show_splits = 0
    let g:airline#extensions#tabline#left_sep = ' '
    let g:airline#extensions#tabline#left_alt_sep = '|'
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    nmap <leader>1 <Plug>AirlineSelectTab1
    nmap <leader>2 <Plug>AirlineSelectTab2
    nmap <leader>3 <Plug>AirlineSelectTab3
    nmap <leader>4 <Plug>AirlineSelectTab4
    nmap <leader>5 <Plug>AirlineSelectTab5
    nmap <leader>6 <Plug>AirlineSelectTab6
    nmap <leader>7 <Plug>AirlineSelectTab7
    nmap <leader>8 <Plug>AirlineSelectTab8
    nmap <leader>9 <Plug>AirlineSelectTab9

" TODO: Replace with https://github.com/tommcdo/vim-lion
Plug 'https://github.com/godlygeek/tabular'
    nmap <Leader>a& :Tabularize /&<CR>
    vmap <Leader>a& :Tabularize /&<CR>
    nmap <Leader>a= :Tabularize /=<CR>
    vmap <Leader>a= :Tabularize /=<CR>
    nmap <Leader>a=> :Tabularize /=><CR>
    vmap <Leader>a=> :Tabularize /=><CR>
    nmap <Leader>a: :Tabularize /:<CR>
    vmap <Leader>a: :Tabularize /:<CR>
    nmap <Leader>a:: :Tabularize /:\zs<CR>
    vmap <Leader>a:: :Tabularize /:\zs<CR>
    nmap <Leader>a, :Tabularize /,<CR>
    vmap <Leader>a, :Tabularize /,<CR>
    nmap <Leader>a,, :Tabularize /,\zs<CR>
    vmap <Leader>a,, :Tabularize /,\zs<CR>
    nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
    vmap <Leader>a<Bar> :Tabularize /<Bar><CR>

Plug 'https://github.com/mileszs/ack.vim'
    if executable('ag')
        let g:ackprg = 'ag --vimgrep'
    endif

" TODO: Replace with https://github.com/Yggdroot/LeaderF
Plug 'https://github.com/ctrlpvim/ctrlp.vim'
    let g:ctrlp_cmd = 'CtrlP'
    let g:ctrlp_working_path_mode = 'ra'
    let g:ctrlp_switch_buffer = '0'
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
    let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:25'

Plug 'https://github.com/luochen1990/rainbow'
    let g:rainbow_active = 1
    let g:rainbow_conf = {
        \   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
        \   'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
        \   'operators': '_,_',
        \   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
        \   'separately': {
        \       '*': {},
        \       'vim': {
        \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
        \       },
        \       'css': 0,
        \   }
        \}

Plug 'https://github.com/junegunn/vim-peekaboo'
Plug 'https://github.com/milkypostman/vim-togglelist'
Plug 'https://github.com/jlanzarotta/bufexplorer'
    let g:bufExplorerFindActive = 0        " Do not go to active window.

Plug 'https://github.com/Yggdroot/indentLine'
    " :IndentLineToggle
    let g:indentLine_char = 'â”†'
    let g:indentLine_enabled = 0

Plug 'https://github.com/tpope/vim-commentary'

Plug 'https://github.com/scrooloose/nerdtree'
    let g:NERDTreeIgnore = ['\.pyc$']
    map <F2> :NERDTreeToggle<CR>

Plug 'https://github.com/scrooloose/syntastic'
    map <F5> :SyntasticCheck<CR>
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_aggregate_errors = 1
    let g:syntastic_sort_aggregated_errors = 0

    let g:syntastic_python_checkers = ['pylint', 'pep8']
    let g:syntastic_python_pylint_args = '--rcfile=~/.pylintrc'

    let g:syntastic_sh_checkers = ['shellcheck']
    let g:syntastic_sh_shellcheck_args = '-x --shell=bash'

    let g:syntastic_go_checkers = ['gometalinter']
    let g:syntastic_go_gometalinter_args = '--enable misspell'

    let g:syntastic_javascript_checkers = ['eslint']
    let g:syntastic_javascript_eslint_exec = 'eslint_d'

    let g:syntastic_ruby_checkers = ['ruboocop']
    let g:syntastic_ruby_rubocop_exec = '/usr/local/bin/diffocop'

    let g:syntastic_markdown_checkers = []

Plug 'https://github.com/sjl/gundo.vim.git', {'on': 'GundoToggle'}
    let g:gundo_prefer_python3 = 1
    map <F3> :GundoToggle<CR>

Plug 'https://github.com/terryma/vim-expand-region'
Plug 'https://github.com/kana/vim-textobj-user'
Plug 'https://github.com/kana/vim-textobj-line'
Plug 'https://github.com/AndrewRadev/inline_edit.vim', {'on': 'InlineEdit'}
    nnoremap <leader>ie :InlineEdit<CR>
Plug 'https://github.com/jez/vim-superman'
Plug 'https://github.com/tpope/vim-unimpaired.git'
Plug 'https://github.com/majutsushi/tagbar'
    map <F8> :TagbarToggle<CR>
Plug 'https://github.com/xolox/vim-easytags'
    let g:easytags_async = 1
    let g:easytags_auto_highlight = 0
    let g:easytags_file = "~/.vim/tags/tags"
    let g:easytags_by_filetype = "~/.vim/tags"
    let g:tagbar_type_go = {
                \ 'ctagstype' : 'go',
                \ 'kinds' : [ 'p:package', 'i:imports:1', 'c:constants', 'v:variables',
                \ 't:types', 'n:interfaces', 'w:fields', 'e:embedded', 'm:methods',
                \ 'r:constructor', 'f:functions' ],
                \ 'sro' : '.',
                \ 'kind2scope' : { 't' : 'ctype', 'n' : 'ntype' },
                \ 'scope2kind' : { 'ctype' : 't', 'ntype' : 'n' },
                \ 'ctagsbin' : 'gotags',
                \ 'ctagsargs' : '-sort -silent'
                \ }

Plug 'KabbAmine/zeavim.vim'
Plug 'https://github.com/xolox/vim-misc'
Plug 'https://github.com/xolox/vim-session'
    map <F1> :SaveSession
    let g:session_autoload = 'no'
    let g:session_autosave = 'yes'
    let g:session_default_to_last = 'no'
    let g:session_directory = '~/.vim/sessions'
    let g:session_autosave_periodic = 5
    let g:session_restart_environment = ['GOPATH', 'GOROOT']
    let g:session_lock_enabled = 0
    let g:session_persist_colors = 0
    set sessionoptions-=options

Plug 'https://github.com/junegunn/goyo.vim'
Plug 'https://github.com/junegunn/limelight.vim'
    autocmd! User GoyoEnter Limelight
    autocmd! User GoyoLeave Limelight!


call plug#end()

set number
set relativenumber
set title
set wildmenu
set wildmode=longest:full,full
set wildignore+=*.o,*.obj,.git,*.pyc,*.swp,*.bak,*~
set wildignore+=eggs/**
set wildignore+=*.egg-info/**
set noerrorbells
set novisualbell t_vb=         " No Beeping / flashing
set gdefault                   " Default to replacing all occurances in replace. use /find/replace/g for first in line
set mouse=a
set mousehide
set mousemodel=popup
set cursorline
set ruler                      " Always show cursor
set virtualedit=all            " Fix to visual mode
set scrolloff=3                " keep cursorline 3 lines from top/bottom
set backspace=indent,eol,start " backspace over autoindent / EOL
set showmatch                  " Show matching parens
set autoindent
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab                  " Use spaces not tabs
set shiftround                 " Rounds indent to multiple of shiftwidth
set formatoptions=croqlj       " Auto format text
set completeopt+=preview
set textwidth=78
set magic                      " use more egrep like regex
set ignorecase                 " ignore case in search
set smartcase                  " Unless search contains uppercase
set lazyredraw                 " Dont redraw when running macros
set hlsearch                   " Highlight search matches
set incsearch                  " Search while composing regex
set nowrap                     " Dont wrap lines
set nobackup                   " Dont write junk files
set nowb
set noswapfile
set autowrite
set autowriteall
set autoread
" set autochdir                  " Change to files dir
set modeline
set modelines=2
set showcmd                    " autocomplete auto commands
set report=0                   " commands show changed line count
set laststatus=2               " always show status
set showtabline=2
set foldenable                 " Turn on folding
set foldmethod=indent          " But dont autofold on open
set foldlevel=100
set splitright                 " Hoz and vert splits appear
set splitbelow                 " below and to the right
set shortmess+=filmnrxoOtT     " Abbrev. of messages (avoids 'hit enter')
set viminfo="$HOME/.vim/viminfo"
set list
set listchars=tab:Â·\ ,trail:Ë½
set grepprg=ag\ --nogroup\ --nocolor

if has("gui_running")
    set background=dark
    if has("mac")
        set guifont=Office\ Code\ Pro\ Medium:h13
    else
        set guifont=Office\ Code\ Pro\ Medium\ 10
    endif
    set guioptions-=T
    set lines=999
    set columns=220
    colorscheme base16-google-dark
else
    set nocursorline " Hide underline in shell. Obscures punctiation esp underscores
    set background=dark
    colorscheme delek
    highlight SpellBad ctermbg=000 ctermfg=9
    au Filetype gitcommit highlight SyntaxError ctermbg=000 ctermfg=9
endif

let mapleader = '\'
let g:mapleader = '\'
let g:is_bash = 1

" Return to last edit position when opening files
if has("autocmd")
    autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

function! WriteCreatingDirs()
    execute ':silent !mkdir -p %:h'
    write
endfunction
command! W call WriteCreatingDirs()
command! -nargs=+ -complete=file -bar Agg silent! grep! <args>|cwindow|redraw!

if exists("+undofile")
    " undofile - This allows you to use undos after exiting and restarting
    " This, like swap and backups, uses .vim-undo first, then ~/.vim/undo
    " :help undo-persistence
    " This is only present in 7.3+
    if isdirectory($HOME . '/.vim/undo') == 0
        :silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
    endif

    set undodir=./.vim-undo//
    set undodir+=~/.vim/undo//
    set undofile
endif

let g:markdown_fenced_languages = ['asm', 'sh', 'bash=sh', 'c', 'python', 'css', 'erb=eruby', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'sass', 'xml', 'html']
augroup txt_files
    autocmd!
    autocmd FileType text,markdown,gitcommit setl nocindent spell wrapmargin=0 wrap
    au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])
augroup END

augroup asm
    autocmd!
    autocmd FileType asm setlocal ft=nasm
augroup END

nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" Force sudo write
cnoremap w!! w !sudo tee % >/dev/null
" Swap the jump to mark operators
" we want to use ' to jump to line+column rather than
" just line as it is closer than `
nnoremap ' `
nnoremap ` '
" make Y work like D - yank to end of line
nmap Y y$
nnoremap ; :
"jj exits insert mode
inoremap jj <ESC>
inoremap jJ <ESC>
inoremap JJ <ESC>
inoremap jk <ESC>
inoremap jK <ESC>
inoremap JK <ESC>
inoremap kkk <ESC>
" Allow j and k to work over wrapped lines.
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
"Toggle code fold
nnoremap <space> za
" Change focus to window in direction
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
" Join next line to current
nnoremap J mzJ`z
" Split Lines at cursor
nnoremap S i<cr><esc>^mwgk:silent! s/\v +$//<cr>:noh<cr>`w
" Resize splits
nnoremap <left> <C-w><
nnoremap <right> <C-w>>
nnoremap <down> <C-w>-
nnoremap <up> <C-w>+
nnoremap <F6> :set spell!<CR>
" Unhighlight matches
nnoremap <leader><space> :noh<cr>
" Useful mappings for managing tabs
nnoremap <leader>tn :tabnew<cr>
nnoremap <leader>tc :tabclose<cr>
nmap <leader>c :clo<CR>
" paste from system clipboard
nnoremap <leader>p :set paste<CR>"+p:set nopaste<CR>
" yank to system clipboard
nnoremap <leader>y "+y
vnoremap <leader>y "+y
nnoremap <leader>v :tabnew<CR>:e! $MYVIMRC<CR>
nnoremap <silent> <leader>V :source $MYVIMRC<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
" H and L move right and left through tabs.
nnoremap <S-H> gT
nnoremap <S-L> gt

" Automatic Filename expansions for commands
" Directory for current file
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
" Current file name
cnoremap %f <C-R>=fnameescape(expand('%:t'))<cr>
" Full path for current file
cnoremap %a <C-R>=fnameescape(expand('%:p'))<cr>
cnoremap %p <C-R>=fnameescape(expand('%:p'))<cr>

nnoremap <leader>es :sp %%
nnoremap <leader>ev :vsp %%
nnoremap <leader>et :tabe %%
" Make all symbols magic. No need to escape parans, *, ? etc
nnoremap / /\v
vnoremap / /\v
